import streamlit as st
import pandas as pd
import numpy as np
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import yfinance as yf
from datetime import datetime, timedelta
from scipy.signal import argrelextrema
import warnings
warnings.filterwarnings('ignore')

# „Éö„Éº„Ç∏Ë®≠ÂÆö
st.set_page_config(
    page_title="Èù©Êñ∞ÁöÑÂ£≤„Çä„Çø„Ç§„Éü„É≥„Ç∞Ê§úÂá∫„Ç∑„Çπ„ÉÜ„É†",
    page_icon="üéØ",
    layout="wide"
)

# „Ç´„Çπ„Çø„É†CSS
st.markdown("""
    <style>
    .main {
        padding: 0rem 1rem;
    }
    .stButton>button {
        background-color: #FF4B4B;
        color: white;
        font-weight: bold;
        border-radius: 5px;
        border: none;
        padding: 0.5rem 2rem;
        width: 100%;
    }
    .stButton>button:hover {
        background-color: #FF6B6B;
    }
    div[data-testid="metric-container"] {
        background-color: rgba(255, 75, 75, 0.1);
        border: 1px solid rgba(255, 75, 75, 0.2);
        padding: 5px 15px;
        border-radius: 5px;
        margin: 5px 0;
    }
    .exit-emergency {
        background-color: #FF0000;
        color: white;
        padding: 10px;
        border-radius: 5px;
        font-weight: bold;
        text-align: center;
    }
    .exit-standard {
        background-color: #FF8C00;
        color: white;
        padding: 10px;
        border-radius: 5px;
        font-weight: bold;
        text-align: center;
    }
    .exit-warning {
        background-color: #FFD700;
        color: black;
        padding: 10px;
        border-radius: 5px;
        font-weight: bold;
        text-align: center;
    }
    </style>
    """, unsafe_allow_html=True)

class AdvancedExitDetector:
    """Èù©Êñ∞ÁöÑÂ£≤„Çä„Çø„Ç§„Éü„É≥„Ç∞Ê§úÂá∫„Ç∑„Çπ„ÉÜ„É†"""
    
    def __init__(self):
        self.df = None
        self.actual_symbol = None
        self.company_name = None
        self.exit_points = {
            'warning': [],      # Êó©ÊúüË≠¶ÊàíÂ£≤„Çä
            'standard': [],     # Ê®ôÊ∫ñÂ£≤„Çä
            'emergency': []     # Á∑äÊÄ•Â£≤„Çä
        }
        self.parabolic_sar = None
        self.atr_trailing_stop = None
        
    def fetch_data(self, symbol, period='2y'):
        """„Éá„Éº„ÇøÂèñÂæó„Å®‰ºÅÊ•≠ÂêçÂèñÂæó"""
        try:
            ticker = yf.Ticker(symbol)
            self.df = ticker.history(period=period, interval='1d')
            
            if not self.df.empty and len(self.df) > 100:
                self.actual_symbol = symbol
                
                # ‰ºÅÊ•≠Âêç„ÇíÂèñÂæó
                try:
                    ticker_info = ticker.info
                    self.company_name = ticker_info.get('shortName') or ticker_info.get('longName') or symbol
                    if len(self.company_name) > 50:
                        self.company_name = self.company_name[:47] + "..."
                except Exception as e:
                    self.company_name = symbol
                    print(f"‰ºÅÊ•≠ÂêçÂèñÂæó„Ç®„É©„Éº: {e}")
                
                return True
            return False
        except Exception as e:
            print(f"„Éá„Éº„ÇøÂèñÂæó„Ç®„É©„Éº: {e}")
            return False
    
    def calculate_parabolic_sar(self, af_initial=0.02, af_increment=0.02, af_max=0.2):
        """„Éë„É©„Éú„É™„ÉÉ„ÇØSARË®àÁÆó"""
        high = self.df['High'].values
        low = self.df['Low'].values
        close = self.df['Close'].values
        
        n = len(close)
        sar = np.zeros(n)
        ep = np.zeros(n)
        af = np.zeros(n)
        trend = np.zeros(n)  # 1: ‰∏äÊòá„Éà„É¨„É≥„Éâ, -1: ‰∏ãÈôç„Éà„É¨„É≥„Éâ
        
        # ÂàùÊúüË®≠ÂÆö
        sar[0] = low[0]
        ep[0] = high[0]
        af[0] = af_initial
        trend[0] = 1
        
        for i in range(1, n):
            if trend[i-1] == 1:  # ‰∏äÊòá„Éà„É¨„É≥„Éâ
                sar[i] = sar[i-1] + af[i-1] * (ep[i-1] - sar[i-1])
                sar[i] = min(sar[i], low[i], low[i-1] if i > 1 else low[i])
                
                if high[i] > ep[i-1]:
                    ep[i] = high[i]
                    af[i] = min(af[i-1] + af_increment, af_max)
                else:
                    ep[i] = ep[i-1]
                    af[i] = af[i-1]
                
                if low[i] <= sar[i]:
                    trend[i] = -1
                    sar[i] = ep[i-1]
                    ep[i] = low[i]
                    af[i] = af_initial
                else:
                    trend[i] = 1
            else:  # ‰∏ãÈôç„Éà„É¨„É≥„Éâ
                sar[i] = sar[i-1] + af[i-1] * (ep[i-1] - sar[i-1])
                sar[i] = max(sar[i], high[i], high[i-1] if i > 1 else high[i])
                
                if low[i] < ep[i-1]:
                    ep[i] = low[i]
                    af[i] = min(af[i-1] + af_increment, af_max)
                else:
                    ep[i] = ep[i-1]
                    af[i] = af[i-1]
                
                if high[i] >= sar[i]:
                    trend[i] = 1
                    sar[i] = ep[i-1]
                    ep[i] = high[i]
                    af[i] = af_initial
                else:
                    trend[i] = -1
        
        self.df['SAR'] = sar
        self.df['SAR_trend'] = trend
        self.parabolic_sar = sar
        
    def calculate_atr_trailing_stop(self, period=14, multiplier=2.5):
        """ATR„Éà„É¨„Éº„É™„É≥„Ç∞„Çπ„Éà„ÉÉ„ÉóË®àÁÆó"""
        # ATRË®àÁÆó
        high_low = self.df['High'] - self.df['Low']
        high_close = np.abs(self.df['High'] - self.df['Close'].shift())
        low_close = np.abs(self.df['Low'] - self.df['Close'].shift())
        
        ranges = pd.concat([high_low, high_close, low_close], axis=1)
        true_range = np.max(ranges, axis=1)
        atr = true_range.rolling(period).mean()
        
        self.df['ATR'] = atr
        
        # ATR„Éà„É¨„Éº„É™„É≥„Ç∞„Çπ„Éà„ÉÉ„ÉóË®àÁÆó
        close = self.df['Close'].values
        high = self.df['High'].values
        atr_values = atr.values
        
        n = len(close)
        trailing_stop = np.zeros(n)
        trailing_stop[0] = close[0] - multiplier * atr_values[0] if not np.isnan(atr_values[0]) else close[0]
        
        for i in range(1, n):
            if np.isnan(atr_values[i]):
                trailing_stop[i] = trailing_stop[i-1]
            else:
                stop_long = high[i] - multiplier * atr_values[i]
                trailing_stop[i] = max(stop_long, trailing_stop[i-1]) if close[i] > trailing_stop[i-1] else stop_long
        
        self.df['ATR_stop'] = trailing_stop
        self.atr_trailing_stop = trailing_stop
        
    def detect_rsi_divergence(self, period=14, lookback=10):
        """RSI„ÉÄ„Ç§„Éê„Éº„Ç∏„Çß„É≥„ÇπÊ§úÂá∫„Å®Áü≠ÊúüRSIË®àÁÆó"""
        # ÈÄöÂ∏∏„ÅÆRSIË®àÁÆóÔºà14ÊúüÈñìÔºâ
        delta = self.df['Close'].diff()
        gain = (delta.where(delta > 0, 0)).rolling(window=period).mean()
        loss = (-delta.where(delta < 0, 0)).rolling(window=period).mean()
        rs = gain / loss
        rsi = 100 - (100 / (1 + rs))
        self.df['RSI'] = rsi
        
        # Áü≠ÊúüRSI(3)Ë®àÁÆó - Ë∂ÖÁü≠Êúü„ÅÆÈÅéÁÜ±ÊÑüÊ§úÂá∫Áî®
        gain_3 = (delta.where(delta > 0, 0)).rolling(window=3).mean()
        loss_3 = (-delta.where(delta < 0, 0)).rolling(window=3).mean()
        rs_3 = gain_3 / loss_3
        rsi_3 = 100 - (100 / (1 + rs_3))
        self.df['RSI_3'] = rsi_3
        
        # RSI(3)„ÅÆÊñπÂêëËª¢ÊèõÊ§úÂá∫Ôºà85‰ª•‰∏ä„Åß„ÅÆ‰∏ãÂêë„ÅçËª¢ÊèõÔºâ
        rsi_3_reversal = []
        for i in range(len(self.df)):
            if i < 2:
                rsi_3_reversal.append(False)
            else:
                # RSI(3)„Åå85‰ª•‰∏ä„Åß„ÄÅ‰∏äÂêë„Åç„Åã„Çâ‰∏ãÂêë„Åç„Å´Ëª¢Êèõ
                current_rsi3 = self.df['RSI_3'].iloc[i]
                prev_rsi3 = self.df['RSI_3'].iloc[i-1]
                prev2_rsi3 = self.df['RSI_3'].iloc[i-2]
                
                if (current_rsi3 > 85 and 
                    prev_rsi3 > prev2_rsi3 and  # ÂâçÂõû„ÅØ‰∏äÂêë„Åç
                    current_rsi3 < prev_rsi3):  # ‰ªäÂõû‰∏ãÂêë„Åç„Å´Ëª¢Êèõ
                    rsi_3_reversal.append(True)
                else:
                    rsi_3_reversal.append(False)
        
        self.df['RSI_3_reversal'] = rsi_3_reversal
        
        # „ÉÄ„Ç§„Éê„Éº„Ç∏„Çß„É≥„ÇπÊ§úÂá∫
        divergence = []
        for i in range(lookback, len(self.df)):
            # Âº±Ê∞ó„ÉÄ„Ç§„Éê„Éº„Ç∏„Çß„É≥„ÇπÔºàÂ£≤„Çä„Ç∑„Ç∞„Éä„É´Ôºâ
            price_highs = argrelextrema(self.df['High'].iloc[i-lookback:i+1].values, np.greater)[0]
            rsi_highs = argrelextrema(rsi.iloc[i-lookback:i+1].values, np.greater)[0]
            
            if len(price_highs) >= 2 and len(rsi_highs) >= 2:
                # ‰æ°Ê†º„ÅØÈ´òÂÄ§Êõ¥Êñ∞„ÄÅRSI„ÅØÈ´òÂÄ§Âàá„Çä‰∏ã„Åí
                if (self.df['High'].iloc[i-lookback+price_highs[-1]] > self.df['High'].iloc[i-lookback+price_highs[-2]] and
                    rsi.iloc[i-lookback+rsi_highs[-1]] < rsi.iloc[i-lookback+rsi_highs[-2]]):
                    divergence.append(True)
                else:
                    divergence.append(False)
            else:
                divergence.append(False)
        
        # „Éë„Éá„Ç£„É≥„Ç∞
        divergence = [False] * lookback + divergence
        self.df['RSI_divergence'] = divergence
        
    def calculate_volume_climax(self, period=20, multiplier=3):
        """„Éú„É™„É•„Éº„É†„ÇØ„É©„Ç§„Éû„ÉÉ„ÇØ„ÇπÊ§úÂá∫"""
        volume_ma = self.df['Volume'].rolling(window=period).mean()
        self.df['Volume_MA'] = volume_ma
        self.df['Volume_ratio'] = self.df['Volume'] / volume_ma
        
        # „ÇØ„É©„Ç§„Éû„ÉÉ„ÇØ„ÇπÊù°‰ª∂
        climax = []
        for i in range(len(self.df)):
            if i < period:
                climax.append(False)
                continue
                
            # Âá∫Êù•È´ò„ÅåÂπ≥Âùá„ÅÆ3ÂÄç‰ª•‰∏ä + ‰∏äÈ´≠„ÅåÈï∑„ÅÑ
            high_vol = self.df['Volume_ratio'].iloc[i] > multiplier
            upper_shadow = (self.df['High'].iloc[i] - max(self.df['Open'].iloc[i], self.df['Close'].iloc[i])) / self.df['High'].iloc[i]
            long_shadow = upper_shadow > 0.02  # 2%‰ª•‰∏ä„ÅÆ‰∏äÈ´≠
            
            # ÁøåÊó•„ÅÆÂá∫Êù•È´òÊ∏õÂ∞ë„Çí„ÉÅ„Çß„ÉÉ„ÇØÔºàÊúÄÁµÇÊó•‰ª•Â§ñÔºâ
            if i < len(self.df) - 1:
                next_vol_decrease = self.df['Volume'].iloc[i+1] < self.df['Volume'].iloc[i] * 0.7
            else:
                next_vol_decrease = False
            
            climax.append(high_vol and long_shadow)
        
        self.df['Volume_climax'] = climax
        
    def calculate_advanced_indicators(self):
        """È´òÂ∫¶„Å™„ÉÜ„ÇØ„Éã„Ç´„É´ÊåáÊ®ôË®àÁÆó"""
        
        # Âü∫Êú¨ÁöÑ„Å™ÁßªÂãïÂπ≥Âùá
        self.df['EMA_9'] = self.df['Close'].ewm(span=9, adjust=False).mean()
        self.df['EMA_21'] = self.df['Close'].ewm(span=21, adjust=False).mean()
        self.df['EMA_50'] = self.df['Close'].ewm(span=50, adjust=False).mean()
        self.df['EMA_200'] = self.df['Close'].ewm(span=200, adjust=False).mean()
        
        # MACD
        exp1 = self.df['Close'].ewm(span=12, adjust=False).mean()
        exp2 = self.df['Close'].ewm(span=26, adjust=False).mean()
        self.df['MACD'] = exp1 - exp2
        self.df['Signal'] = self.df['MACD'].ewm(span=9, adjust=False).mean()
        self.df['MACD_hist'] = self.df['MACD'] - self.df['Signal']
        
        # Stochastic RSI
        rsi = self.df['RSI']
        rsi_min = rsi.rolling(window=14).min()
        rsi_max = rsi.rolling(window=14).max()
        self.df['StochRSI'] = (rsi - rsi_min) / (rsi_max - rsi_min + 0.00001)
        
        # „Éú„É™„É≥„Ç∏„É£„Éº„Éê„É≥„Éâ
        self.df['BB_middle'] = self.df['Close'].rolling(window=20).mean()
        bb_std = self.df['Close'].rolling(window=20).std()
        self.df['BB_upper'] = self.df['BB_middle'] + (bb_std * 2)
        self.df['BB_lower'] = self.df['BB_middle'] - (bb_std * 2)
        self.df['BB_width'] = (self.df['BB_upper'] - self.df['BB_lower']) / self.df['BB_middle'] * 100
        self.df['BB_percent'] = (self.df['Close'] - self.df['BB_lower']) / (self.df['BB_upper'] - self.df['BB_lower'])
        
        # OBV
        obv = []
        obv_value = 0
        
        for i in range(len(self.df)):
            if i == 0:
                obv.append(0)
            else:
                if self.df['Close'].iloc[i] > self.df['Close'].iloc[i-1]:
                    obv_value += self.df['Volume'].iloc[i]
                elif self.df['Close'].iloc[i] < self.df['Close'].iloc[i-1]:
                    obv_value -= self.df['Volume'].iloc[i]
                obv.append(obv_value)
        
        self.df['OBV'] = obv
        self.df['OBV_MA'] = pd.Series(obv).rolling(window=20).mean()
        
        # „É¢„É°„É≥„Çø„É†
        self.df['Momentum'] = self.df['Close'].pct_change(periods=10) * 100
        
        # Williams %R
        high_14 = self.df['High'].rolling(window=14).max()
        low_14 = self.df['Low'].rolling(window=14).min()
        self.df['Williams_R'] = -100 * (high_14 - self.df['Close']) / (high_14 - low_14)
        
    def detect_exit_points(self, sar_weight=2.5, atr_weight=2.0, rsi_div_weight=1.8,
                          vol_climax_weight=1.5, bb_weight=3.0, macd_weight=1.2,
                          obv_weight=1.0, macd_hist_weight=1.3, bb_approach_threshold=0.98, bb_enhanced=True):
        """Â£≤„Çä„Éù„Ç§„É≥„ÉàÊ§úÂá∫Ôºà„Çπ„Ç≥„Ç¢„É™„É≥„Ç∞„Ç∑„Çπ„ÉÜ„É†Ôºâ"""
        
        for i in range(50, len(self.df)):
            current = self.df.iloc[i]
            prev1 = self.df.iloc[i-1]
            prev2 = self.df.iloc[i-2]
            prev5 = self.df.iloc[i-5]
            
            # NaNÂÄ§„ÅÆ„ÉÅ„Çß„ÉÉ„ÇØ
            if pd.isna(current['RSI']) or pd.isna(current['MACD']):
                continue
            
            exit_score = 0
            conditions = {}
            
            # 1. „Éë„É©„Éú„É™„ÉÉ„ÇØSARÂèçËª¢ÔºàÂ£≤„Çä„Ç∑„Ç∞„Éä„É´Ôºâ
            sar_sell = (prev1['SAR_trend'] == 1 and current['SAR_trend'] == -1)
            if sar_sell:
                exit_score += sar_weight
                conditions['SARÂèçËª¢'] = True
            else:
                conditions['SARÂèçËª¢'] = False
            
            # 2. ATR„Éà„É¨„Éº„É™„É≥„Ç∞„Çπ„Éà„ÉÉ„ÉóÊäµËß¶
            atr_stop_hit = current['Close'] < current['ATR_stop']
            if atr_stop_hit:
                exit_score += atr_weight
                conditions['ATR„Çπ„Éà„ÉÉ„Éó'] = True
            else:
                conditions['ATR„Çπ„Éà„ÉÉ„Éó'] = False
            
            # 3. RSI„ÉÄ„Ç§„Éê„Éº„Ç∏„Çß„É≥„Çπ
            if current['RSI_divergence']:
                exit_score += rsi_div_weight
                conditions['RSI„ÉÄ„Ç§„Éê„Éº„Ç∏„Çß„É≥„Çπ'] = True
            else:
                conditions['RSI„ÉÄ„Ç§„Éê„Éº„Ç∏„Çß„É≥„Çπ'] = False
            
            # 4. „Éú„É™„É•„Éº„É†„ÇØ„É©„Ç§„Éû„ÉÉ„ÇØ„Çπ
            if current['Volume_climax']:
                exit_score += vol_climax_weight
                conditions['Âá∫Êù•È´ò„ÇØ„É©„Ç§„Éû„ÉÉ„ÇØ„Çπ'] = True
            else:
                conditions['Âá∫Êù•È´ò„ÇØ„É©„Ç§„Éû„ÉÉ„ÇØ„Çπ'] = False
            
            # 5. „Éú„É™„É≥„Ç∏„É£„Éº„Éê„É≥„Éâ‰∏äÈôê„Åã„Çâ„ÅÆÂèçËêΩÔºàÊîπËâØÁâàÔºâ
            if bb_enhanced:
                # 5-1. BB‰∏äÈôê„Çø„ÉÉ„ÉÅÊ§úÂá∫ÔºàÈ´òÂÄ§„ÅåBB‰∏äÈôê„ÇíË∂Ö„Åà„ÇãÔºâ
                bb_touch = current['High'] >= current['BB_upper']
                
                # 5-2. BB‰∏äÈôêÊé•ËøëÊ§úÂá∫ÔºàÁµÇÂÄ§„ÅåBB‰∏äÈôê„ÅÆÊåáÂÆö%‰ª•‰∏äÔºâ
                bb_approach = current['Close'] >= current['BB_upper'] * bb_approach_threshold
                
                # 5-3. BB‰∏äÈôê„Åã„Çâ„ÅÆÂèçËêΩÈñãÂßã
                bb_reversal_start = (prev1['High'] >= prev1['BB_upper'] and 
                                    current['Close'] < current['BB_upper'])
                
                # 5-4. Âº∑„ÅÑBB‰∏äÈôêÂèçËêΩÔºàÂâçÊó•BBË∂Ö„Åà‚ÜíÂΩìÊó•Èô∞Á∑ö„Åß‰∏ãËêΩÔºâ
                strong_bb_reversal = (prev1['Close'] > prev1['BB_upper'] and 
                                     current['Close'] < current['Open'] and
                                     current['Close'] < prev1['Close'])
                
                # BBÈñ¢ÈÄ£„Çπ„Ç≥„Ç¢Ë®àÁÆó
                bb_signal = False
                if strong_bb_reversal:
                    exit_score += bb_weight * 1.5  # Âº∑„ÅÑÂèçËêΩ„ÅØÈáç„ÅøÂ¢óÂä†
                    bb_signal = True
                    conditions['BBÂº∑ÂèçËêΩ'] = True
                else:
                    conditions['BBÂº∑ÂèçËêΩ'] = False
                    
                if bb_reversal_start and not strong_bb_reversal:
                    exit_score += bb_weight * 1.2
                    bb_signal = True
                    conditions['BBÂèçËêΩÈñãÂßã'] = True
                else:
                    conditions['BBÂèçËêΩÈñãÂßã'] = False
                    
                if bb_touch and not bb_reversal_start and not strong_bb_reversal:
                    exit_score += bb_weight * 1.0
                    bb_signal = True
                    conditions['BB‰∏äÈôê„Çø„ÉÉ„ÉÅ'] = True
                else:
                    conditions['BB‰∏äÈôê„Çø„ÉÉ„ÉÅ'] = False
                    
                if bb_approach and not bb_touch and not bb_reversal_start and not strong_bb_reversal:
                    exit_score += bb_weight * 0.8
                    bb_signal = True
                    conditions['BB‰∏äÈôêÊé•Ëøë'] = True
                else:
                    conditions['BB‰∏äÈôêÊé•Ëøë'] = False
                
                # ËøΩÂä†: BB„Éê„É≥„ÉâÂπÖÊã°Â§ßÊôÇ„ÅÆ‰∏äÈôê„Çø„ÉÉ„ÉÅÔºà„Çà„ÇäÂº∑„ÅÑ„Ç∑„Ç∞„Éä„É´Ôºâ
                bb_width_expanding = current['BB_width'] > prev5['BB_width'] * 1.1
                if bb_touch and bb_width_expanding:
                    exit_score += 0.5
                    conditions['BBÊã°Â§ßÊôÇ„Çø„ÉÉ„ÉÅ'] = True
                else:
                    conditions['BBÊã°Â§ßÊôÇ„Çø„ÉÉ„ÉÅ'] = False
                    
                if not bb_signal:
                    conditions['BB‰∏äÈôêÂèçËêΩ'] = False
            else:
                # ÂæìÊù•„ÅÆ„Ç∑„É≥„Éó„É´„Å™Âà§ÂÆö
                bb_reversal = (current['BB_percent'] > 0.95 and 
                              current['Close'] < prev1['Close'] and
                              prev1['BB_percent'] > 1.0)
                if bb_reversal:
                    exit_score += bb_weight
                    conditions['BB‰∏äÈôêÂèçËêΩ'] = True
                else:
                    conditions['BB‰∏äÈôêÂèçËêΩ'] = False
            
            # 6. MACDÂ£≤„Çä„ÇØ„É≠„Çπ
            macd_sell_cross = (prev1['MACD'] > prev1['Signal'] and 
                              current['MACD'] < current['Signal'])
            if macd_sell_cross:
                exit_score += macd_weight
                conditions['MACDÂ£≤„Çä„ÇØ„É≠„Çπ'] = True
            else:
                conditions['MACDÂ£≤„Çä„ÇØ„É≠„Çπ'] = False
            
            # 7. OBV‰∏ãËêΩËª¢Êèõ
            obv_decline = (current['OBV'] < current['OBV_MA'] and 
                          prev1['OBV'] > prev1['OBV_MA'])
            if obv_decline:
                exit_score += obv_weight
                conditions['OBV‰∏ãËêΩËª¢Êèõ'] = True
            else:
                conditions['OBV‰∏ãËêΩËª¢Êèõ'] = False
            
            # ËøΩÂä†Êù°‰ª∂
            # 8. RSIÈÅéÁÜ±Âúè„Åã„Çâ„ÅÆÂèçËêΩ
            rsi_overbought = current['RSI'] > 70 and current['RSI'] < prev1['RSI']
            if rsi_overbought:
                exit_score += 1.0
                conditions['RSIÈÅéÁÜ±Âúè'] = True
            else:
                conditions['RSIÈÅéÁÜ±Âúè'] = False
            
            # 9. „É¢„É°„É≥„Çø„É†‰Ωé‰∏ã
            momentum_decline = (current['Momentum'] < 0 and 
                              prev1['Momentum'] > 0)
            if momentum_decline:
                exit_score += 0.8
                conditions['„É¢„É°„É≥„Çø„É†‰Ωé‰∏ã'] = True
            else:
                conditions['„É¢„É°„É≥„Çø„É†‰Ωé‰∏ã'] = False
            
            # 10. Williams %RÂ£≤„Çä„Ç∑„Ç∞„Éä„É´
            williams_sell = current['Williams_R'] > -20
            if williams_sell:
                exit_score += 0.7
                conditions['Williams%R'] = True
            else:
                conditions['Williams%R'] = False
            
            # 11. RSI(3)Ê•µÈôêÈÅéÁÜ±„Åã„Çâ„ÅÆÂèçËª¢ÔºàÊñ∞Ë¶èËøΩÂä† - Ë∂ÖÂº∑Âäõ„Ç∑„Ç∞„Éä„É´Ôºâ
            rsi3_extreme_reversal = current.get('RSI_3_reversal', False)
            if rsi3_extreme_reversal:
                exit_score += 2.2  # ÈùûÂ∏∏„Å´Âº∑Âäõ„Å™„Ç∑„Ç∞„Éä„É´„Å™„ÅÆ„ÅßÈ´ò„ÅÑÈáç„Åø
                conditions['RSI3Ê•µÈôêÂèçËª¢'] = True
            else:
                conditions['RSI3Ê•µÈôêÂèçËª¢'] = False
            
            # 12. MACD„Éí„Çπ„Éà„Ç∞„É©„É†„ÅÆ„Éî„Éº„ÇØ„Ç¢„Ç¶„ÉàÔºàÊñ∞Ë¶èËøΩÂä† - „É¢„É°„É≥„Çø„É†Ê∏õË°∞Ôºâ
            macd_hist_peakout = False
            if not pd.isna(current['MACD_hist']) and not pd.isna(prev1['MACD_hist']):
                # „Éó„É©„ÇπÂúè„Åß„Éí„Çπ„Éà„Ç∞„É©„É†„ÅåÊ∏õÂ∞ëÈñãÂßãÔºàÂ±±„ÅÆÈ†ÇÁÇπÔºâ
                if (current['MACD_hist'] > 0 and 
                    prev1['MACD_hist'] > 0 and
                    current['MACD_hist'] < prev1['MACD_hist']):
                    # 2Êó•ÈÄ£Á∂ö„ÅßÊ∏õÂ∞ë„Åó„Å¶„ÅÑ„ÇãÂ†¥Âêà„ÅØ„Çà„ÇäÂº∑„ÅÑ„Ç∑„Ç∞„Éä„É´
                    if not pd.isna(prev2['MACD_hist']) and prev1['MACD_hist'] < prev2['MACD_hist']:
                        exit_score += macd_hist_weight * 1.4  # 2Êó•ÈÄ£Á∂öÊ∏õÂ∞ë„ÅØÂº∑„ÅÑ„Ç∑„Ç∞„Éä„É´
                        conditions['MACD„Éí„Çπ„ÉàÈ†ÇÁÇπ(Âº∑)'] = True
                        macd_hist_peakout = True
                    else:
                        exit_score += macd_hist_weight  # ÂàùÂõûÊ∏õÂ∞ë
                        conditions['MACD„Éí„Çπ„ÉàÈ†ÇÁÇπ'] = True
                        macd_hist_peakout = True
            
            if not macd_hist_peakout:
                conditions['MACD„Éí„Çπ„ÉàÈ†ÇÁÇπ'] = False
                conditions['MACD„Éí„Çπ„ÉàÈ†ÇÁÇπ(Âº∑)'] = False
            
            # Â£≤„Çä„É¨„Éô„É´Âà§ÂÆö
            if exit_score >= 7:
                # Á∑äÊÄ•Â£≤„Çä
                self.exit_points['emergency'].append({
                    'date': self.df.index[i],
                    'price': current['Close'],
                    'type': 'emergency',
                    'score': exit_score,
                    'conditions': conditions.copy()
                })
            elif exit_score >= 5:
                # Ê®ôÊ∫ñÂ£≤„Çä
                self.exit_points['standard'].append({
                    'date': self.df.index[i],
                    'price': current['Close'],
                    'type': 'standard',
                    'score': exit_score,
                    'conditions': conditions.copy()
                })
            elif exit_score >= 3:
                # Êó©ÊúüË≠¶ÊàíÂ£≤„Çä
                self.exit_points['warning'].append({
                    'date': self.df.index[i],
                    'price': current['Close'],
                    'type': 'warning',
                    'score': exit_score,
                    'conditions': conditions.copy()
                })
    
    def create_chart(self, selected_exit_types):
        """„ÉÅ„É£„Éº„Éà‰ΩúÊàêÔºàÈÅ∏Êäû„Åï„Çå„ÅüÂ£≤„Çä„Çø„Ç§„Éó„ÅÆ„ÅøË°®Á§∫Ôºâ"""
        
        # „Éá„Éº„Çø„Éï„É¨„Éº„É†„ÅÆ„Ç≥„Éî„Éº„Çí‰ΩúÊàê
        df_copy = self.df.copy()
        df_copy.index = pd.to_datetime(df_copy.index).strftime('%m-%d-%Y')
        
        # „Çµ„Éñ„Éó„É≠„ÉÉ„Éà‰ΩúÊàê
        fig = make_subplots(
            rows=5, cols=1,
            shared_xaxes=True,
            vertical_spacing=0.02,
            row_heights=[0.4, 0.15, 0.15, 0.15, 0.15],
            subplot_titles=(f'{self.company_name or self.actual_symbol} - Èù©Êñ∞ÁöÑÂ£≤„Çä„Çø„Ç§„Éü„É≥„Ç∞Ê§úÂá∫',
                          'Volume & OBV',
                          'RSI(14) & RSI(3) - Ê•µÈôêÈÅéÁÜ±Ê§úÂá∫',
                          'MACD & „É¢„É°„É≥„Çø„É† - „Éî„Éº„ÇØ„Ç¢„Ç¶„ÉàÊ§úÂá∫',
                          'ATR & „Éú„É©„ÉÜ„Ç£„É™„ÉÜ„Ç£'),
            specs=[[{"secondary_y": False}],
                   [{"secondary_y": True}],
                   [{"secondary_y": False}],
                   [{"secondary_y": True}],
                   [{"secondary_y": True}]]
        )
        
        # 1. „É°„Ç§„É≥„ÉÅ„É£„Éº„ÉàÔºà„É≠„Éº„ÇΩ„ÇØË∂≥Ôºâ
        fig.add_trace(
            go.Candlestick(
                x=df_copy.index,
                open=df_copy['Open'],
                high=df_copy['High'],
                low=df_copy['Low'],
                close=df_copy['Close'],
                name=self.company_name or self.actual_symbol,
                increasing_line_color='green',
                decreasing_line_color='red'
            ),
            row=1, col=1
        )
        
        # „Éë„É©„Éú„É™„ÉÉ„ÇØSAR
        fig.add_trace(
            go.Scatter(
                x=df_copy.index,
                y=df_copy['SAR'],
                mode='markers',
                name='Parabolic SAR',
                marker=dict(
                    size=3,
                    color=['green' if t == 1 else 'red' for t in df_copy['SAR_trend']]
                )
            ),
            row=1, col=1
        )
        
        # ATR„Éà„É¨„Éº„É™„É≥„Ç∞„Çπ„Éà„ÉÉ„Éó
        fig.add_trace(
            go.Scatter(
                x=df_copy.index,
                y=df_copy['ATR_stop'],
                name='ATR Trailing Stop',
                line=dict(color='orange', width=2, dash='dash')
            ),
            row=1, col=1
        )
        
        # EMA„É©„Ç§„É≥
        ema_configs = [
            ('EMA_9', 'blue', 1, 'EMA9'),
            ('EMA_21', 'green', 1, 'EMA21'),
            ('EMA_50', 'purple', 1, 'EMA50')
        ]
        
        for ema_col, color, width, label in ema_configs:
            if ema_col in df_copy.columns:
                fig.add_trace(
                    go.Scatter(
                        x=df_copy.index,
                        y=df_copy[ema_col],
                        name=label,
                        line=dict(color=color, width=width),
                        opacity=0.5
                    ),
                    row=1, col=1
                )
        
        # „Éú„É™„É≥„Ç∏„É£„Éº„Éê„É≥„ÉâÔºàÊîπËâØÁâà - ‰∏äÈôê„ÇíÂº∑Ë™øÔºâ
        fig.add_trace(
            go.Scatter(
                x=df_copy.index,
                y=df_copy['BB_upper'],
                name='BB Upper ‚ö†Ô∏è',
                line=dict(color='red', width=2, dash='dash'),
                opacity=0.8,
                showlegend=True
            ),
            row=1, col=1
        )
        
        fig.add_trace(
            go.Scatter(
                x=df_copy.index,
                y=df_copy['BB_lower'],
                name='BB Lower',
                line=dict(color='lightgray', width=1, dash='dash'),
                fill='tonexty',
                fillcolor='rgba(200,200,200,0.1)',
                showlegend=False
            ),
            row=1, col=1
        )
        
        # Â£≤„Çä„Éù„Ç§„É≥„ÉàË°®Á§∫ÔºàÈÅ∏Êäû„Åï„Çå„Åü„Çø„Ç§„Éó„ÅÆ„ÅøÔºâ
        exit_configs = [
            ('warning', 'yellow', 'triangle-down', 12, 'Êó©ÊúüË≠¶Êàí'),
            ('standard', 'orange', 'triangle-down', 16, 'Ê®ôÊ∫ñÂ£≤„Çä'),
            ('emergency', 'red', 'triangle-down', 20, 'Á∑äÊÄ•Â£≤„Çä')
        ]
        
        # Êó•Êú¨Ë™û„Åã„ÇâËã±Ë™û„Ç≠„Éº„Å∏„ÅÆ„Éû„ÉÉ„Éî„É≥„Ç∞
        type_mapping = {
            'Êó©ÊúüË≠¶Êàí': 'warning',
            'Ê®ôÊ∫ñÂ£≤„Çä': 'standard',
            'Á∑äÊÄ•Â£≤„Çä': 'emergency'
        }
        
        # ÈÅ∏Êäû„Åï„Çå„Åü„Çø„Ç§„Éó„ÅÆËã±Ë™û„Ç≠„Éº„É™„Çπ„Éà„Çí‰ΩúÊàê
        selected_types = [type_mapping[t] for t in selected_exit_types if t in type_mapping]
        
        for exit_type, color, symbol, size, label in exit_configs:
            if exit_type in selected_types and self.exit_points[exit_type]:
                dates = [pd.to_datetime(ep['date']).strftime('%m-%d-%Y') for ep in self.exit_points[exit_type]]
                prices = [ep['price'] for ep in self.exit_points[exit_type]]
                scores = [ep['score'] for ep in self.exit_points[exit_type]]
                
                fig.add_trace(
                    go.Scatter(
                        x=dates,
                        y=prices,
                        mode='markers',
                        name=f'{label}',
                        marker=dict(
                            size=size,
                            color=color,
                            symbol=symbol,
                            line=dict(color='black', width=2)
                        ),
                        text=[f"Score: {s:.1f}" for s in scores],
                        hovertemplate='%{x}<br>‰æ°Ê†º: %{y:.2f}<br>%{text}<extra></extra>'
                    ),
                    row=1, col=1
                )
        
        # 2. Âá∫Êù•È´ò„Å®OBV
        colors = ['green' if close >= open else 'red' 
                 for close, open in zip(df_copy['Close'], df_copy['Open'])]
        
        fig.add_trace(
            go.Bar(
                x=df_copy.index,
                y=df_copy['Volume'],
                name='Volume',
                marker_color=colors,
                opacity=0.5,
                showlegend=True
            ),
            row=2, col=1,
            secondary_y=False
        )
        
        fig.add_trace(
            go.Scatter(
                x=df_copy.index,
                y=df_copy['OBV'],
                name='OBV',
                line=dict(color='purple', width=1.5),
                showlegend=True
            ),
            row=2, col=1,
            secondary_y=True
        )
        
        # 3. RSIÔºàÈÄöÂ∏∏„ÅÆRSI„Å®RSI(3)„Çí‰∏°ÊñπË°®Á§∫Ôºâ
        fig.add_trace(
            go.Scatter(
                x=df_copy.index,
                y=df_copy['RSI'],
                name='RSI(14)',
                line=dict(color='blue', width=1.5)
            ),
            row=3, col=1
        )
        
        # RSI(3)„ÇíËøΩÂä†Ë°®Á§∫
        fig.add_trace(
            go.Scatter(
                x=df_copy.index,
                y=df_copy['RSI_3'],
                name='RSI(3) üî•',
                line=dict(color='red', width=1, dash='dot'),
                opacity=0.7
            ),
            row=3, col=1
        )
        
        # RSI(3)„ÅÆ85‰ª•‰∏ä„Åß„ÅÆÂèçËª¢„Éû„Éº„Ç´„Éº
        rsi3_rev_indices = df_copy[df_copy['RSI_3_reversal'] == True].index
        if len(rsi3_rev_indices) > 0:
            fig.add_trace(
                go.Scatter(
                    x=rsi3_rev_indices,
                    y=df_copy.loc[rsi3_rev_indices, 'RSI_3'],
                    mode='markers',
                    name='RSI(3)Ê•µÈôêÂèçËª¢',
                    marker=dict(
                        size=12,
                        color='darkred',
                        symbol='triangle-down',
                        line=dict(color='white', width=1)
                    )
                ),
                row=3, col=1
            )
        
        # RSI„ÉÄ„Ç§„Éê„Éº„Ç∏„Çß„É≥„Çπ„Éû„Éº„Ç´„Éº
        div_indices = df_copy[df_copy['RSI_divergence'] == True].index
        if len(div_indices) > 0:
            fig.add_trace(
                go.Scatter(
                    x=div_indices,
                    y=df_copy.loc[div_indices, 'RSI'],
                    mode='markers',
                    name='RSI„ÉÄ„Ç§„Éê„Éº„Ç∏„Çß„É≥„Çπ',
                    marker=dict(
                        size=10,
                        color='orange',
                        symbol='x'
                    )
                ),
                row=3, col=1
            )
        
        # RSIÂü∫Ê∫ñÁ∑öÔºà85„É©„Ç§„É≥„ÇíËøΩÂä†Ôºâ
        fig.add_hline(y=85, line_dash="dash", line_color="darkred", row=3, col=1, line_width=1)
        fig.add_hline(y=70, line_dash="dash", line_color="red", row=3, col=1, line_width=0.5)
        fig.add_hline(y=50, line_dash="dash", line_color="gray", row=3, col=1, line_width=0.5)
        fig.add_hline(y=30, line_dash="dash", line_color="green", row=3, col=1, line_width=0.5)
        
        # 4. MACD & „É¢„É°„É≥„Çø„É†
        fig.add_trace(
            go.Scatter(
                x=df_copy.index,
                y=df_copy['MACD'],
                name='MACD',
                line=dict(color='blue', width=1)
            ),
            row=4, col=1,
            secondary_y=False
        )
        
        fig.add_trace(
            go.Scatter(
                x=df_copy.index,
                y=df_copy['Signal'],
                name='Signal',
                line=dict(color='red', width=1)
            ),
            row=4, col=1,
            secondary_y=False
        )
        
        # MACD„Éí„Çπ„Éà„Ç∞„É©„É†ÔºàËâ≤ÂàÜ„Åë„ÇíÊîπËâØÔºâ
        colors = []
        peak_indices = []  # „Éî„Éº„ÇØ„Ç¢„Ç¶„Éà„Éù„Ç§„É≥„Éà„ÇíË®òÈå≤
        
        for i in range(len(df_copy)):
            if i == 0:
                colors.append('green' if df_copy['MACD_hist'].iloc[i] >= 0 else 'red')
            else:
                current_hist = df_copy['MACD_hist'].iloc[i]
                prev_hist = df_copy['MACD_hist'].iloc[i-1]
                
                # „Éó„É©„ÇπÂúè„Åß„ÅÆ„Éî„Éº„ÇØ„Ç¢„Ç¶„Éà„ÇíÊ§úÂá∫
                if current_hist > 0 and prev_hist > 0 and current_hist < prev_hist:
                    colors.append('orange')  # „Éî„Éº„ÇØ„Ç¢„Ç¶„Éà„ÅØ„Ç™„É¨„É≥„Ç∏Ëâ≤
                    peak_indices.append(i)
                elif current_hist >= 0:
                    colors.append('green')
                else:
                    colors.append('red')
        
        fig.add_trace(
            go.Bar(
                x=df_copy.index,
                y=df_copy['MACD_hist'],
                name='MACD Hist',
                marker_color=colors,
                opacity=0.5,
                showlegend=True,
                hovertemplate='MACD Hist: %{y:.3f}<extra></extra>'
            ),
            row=4, col=1,
            secondary_y=False
        )
        
        # MACD„Éí„Çπ„Éà„Ç∞„É©„É†„ÅÆ„Éî„Éº„ÇØ„Ç¢„Ç¶„Éà„Éù„Ç§„É≥„Éà„Å´„Éû„Éº„Ç´„ÉºËøΩÂä†
        if peak_indices:
            peak_dates = [df_copy.index[i] for i in peak_indices]
            peak_values = [df_copy['MACD_hist'].iloc[i] for i in peak_indices]
            fig.add_trace(
                go.Scatter(
                    x=peak_dates,
                    y=peak_values,
                    mode='markers',
                    name='MACD„Éí„Çπ„ÉàÈ†ÇÁÇπ',
                    marker=dict(
                        size=8,
                        color='darkorange',
                        symbol='diamond',
                        line=dict(color='white', width=1)
                    ),
                    showlegend=True
                ),
                row=4, col=1,
                secondary_y=False
            )
        
        # „É¢„É°„É≥„Çø„É†Ôºà„Çª„Ç´„É≥„ÉÄ„É™YËª∏Ôºâ
        fig.add_trace(
            go.Scatter(
                x=df_copy.index,
                y=df_copy['Momentum'],
                name='Momentum',
                line=dict(color='purple', width=1, dash='dot'),
                opacity=0.7
            ),
            row=4, col=1,
            secondary_y=True
        )
        
        # 5. ATR & „Éú„É©„ÉÜ„Ç£„É™„ÉÜ„Ç£
        fig.add_trace(
            go.Scatter(
                x=df_copy.index,
                y=df_copy['ATR'],
                name='ATR',
                line=dict(color='orange', width=1.5)
            ),
            row=5, col=1,
            secondary_y=False
        )
        
        # BB Width
        fig.add_trace(
            go.Scatter(
                x=df_copy.index,
                y=df_copy['BB_width'],
                name='BB Width (%)',
                line=dict(color='purple', width=1)
            ),
            row=5, col=1,
            secondary_y=True
        )
        
        # „É¨„Ç§„Ç¢„Ç¶„ÉàË®≠ÂÆö
        fig.update_layout(
            title={
                'text': f'{self.company_name or self.actual_symbol} ({self.actual_symbol}) - Èù©Êñ∞ÁöÑÂ£≤„Çä„Çø„Ç§„Éü„É≥„Ç∞Ê§úÂá∫„Ç∑„Çπ„ÉÜ„É†',
                'font': {'size': 20}
            },
            xaxis_rangeslider_visible=False,
            height=900,
            showlegend=True,
            hovermode='x unified',
            template='plotly_white',
            legend=dict(
                orientation="h",
                yanchor="bottom",
                y=1.02,
                xanchor="right",
                x=1
            )
        )
        
        # XËª∏Ë®≠ÂÆö
        for i in range(1, 6):
            fig.update_xaxes(
                type='category',
                tickmode='linear',
                tick0=0,
                dtick=20,
                tickangle=45,
                row=i, col=1
            )
        
        # YËª∏„É©„Éô„É´
        fig.update_yaxes(title_text="Price", row=1, col=1)
        fig.update_yaxes(title_text="Volume", row=2, col=1, secondary_y=False)
        fig.update_yaxes(title_text="OBV", row=2, col=1, secondary_y=True)
        fig.update_yaxes(title_text="RSI(14) / RSI(3)", row=3, col=1, range=[0, 100])
        fig.update_yaxes(title_text="MACD", row=4, col=1, secondary_y=False)
        fig.update_yaxes(title_text="Momentum (%)", row=4, col=1, secondary_y=True)
        fig.update_yaxes(title_text="ATR", row=5, col=1, secondary_y=False)
        fig.update_yaxes(title_text="BB Width (%)", row=5, col=1, secondary_y=True)
        
        return fig
    
    def analyze_performance(self, selected_exit_types):
        """Â£≤„Çä„Éë„Éï„Ç©„Éº„Éû„É≥„ÇπÂàÜÊûê"""
        performance_stats = {}
        
        # Êó•Êú¨Ë™û„Åã„ÇâËã±Ë™û„Ç≠„Éº„Å∏„ÅÆ„Éû„ÉÉ„Éî„É≥„Ç∞
        type_mapping = {
            'Êó©ÊúüË≠¶Êàí': 'warning',
            'Ê®ôÊ∫ñÂ£≤„Çä': 'standard',
            'Á∑äÊÄ•Â£≤„Çä': 'emergency'
        }
        
        # ÈÅ∏Êäû„Åï„Çå„Åü„Çø„Ç§„Éó„ÅÆËã±Ë™û„Ç≠„Éº„É™„Çπ„Éà„Çí‰ΩúÊàê
        selected_types = [type_mapping[t] for t in selected_exit_types if t in type_mapping]
        
        for exit_type in selected_types:
            if not self.exit_points[exit_type]:
                continue
            
            avoided_losses = []
            for ep in self.exit_points[exit_type]:
                try:
                    exit_idx = self.df.index.get_loc(ep['date'])
                    if exit_idx + 20 < len(self.df):
                        exit_price = ep['price']
                        future_prices = self.df['Low'].iloc[exit_idx+1:exit_idx+21]
                        max_drawdown = ((future_prices.min() - exit_price) / exit_price) * 100
                        avoided_losses.append(-max_drawdown)  # ÂõûÈÅø„Åß„Åç„ÅüÊêçÂ§±
                except:
                    continue
            
            if avoided_losses:
                performance_stats[exit_type] = {
                    'count': len(self.exit_points[exit_type]),
                    'avg_avoided_loss': np.mean(avoided_losses),
                    'max_avoided_loss': np.max(avoided_losses),
                    'min_avoided_loss': np.min(avoided_losses),
                    'success_rate': len([l for l in avoided_losses if l > 0]) / len(avoided_losses) * 100
                }
        
        return performance_stats
    
    def get_current_exit_signal(self):
        """ÁèæÂú®„ÅÆÂ£≤„Çä„Ç∑„Ç∞„Éä„É´Âº∑Â∫¶„ÇíË®àÁÆó"""
        if len(self.df) < 2:
            return 0, {}
        
        current = self.df.iloc[-1]
        prev = self.df.iloc[-2]
        
        exit_score = 0
        active_signals = []
        
        # ÂêÑ„Ç∑„Ç∞„Éä„É´„Çí„ÉÅ„Çß„ÉÉ„ÇØ
        if prev['SAR_trend'] == 1 and current['SAR_trend'] == -1:
            exit_score += 2.5
            active_signals.append("SARÂèçËª¢")
        
        if current['Close'] < current['ATR_stop']:
            exit_score += 2.0
            active_signals.append("ATR„Çπ„Éà„ÉÉ„Éó")
        
        if current.get('RSI_divergence', False):
            exit_score += 1.8
            active_signals.append("RSI„ÉÄ„Ç§„Éê„Éº„Ç∏„Çß„É≥„Çπ")
        
        if current.get('Volume_climax', False):
            exit_score += 1.5
            active_signals.append("Âá∫Êù•È´ò„ÇØ„É©„Ç§„Éû„ÉÉ„ÇØ„Çπ")
        
        # BBÈñ¢ÈÄ£„Ç∑„Ç∞„Éä„É´ÔºàÊîπËâØÁâàÔºâ
        if current['Close'] > current['BB_upper']:
            exit_score += 3.0  # „Éá„Éï„Ç©„É´„ÉàÂÄ§„Å´Âêà„Çè„Åõ„Å¶Ë™øÊï¥
            active_signals.append("BB‰∏äÈôêÁ™ÅÁ†¥")
        elif current['High'] >= current['BB_upper']:
            exit_score += 2.25
            active_signals.append("BB‰∏äÈôê„Çø„ÉÉ„ÉÅ")
        elif current['Close'] >= current['BB_upper'] * 0.98:
            exit_score += 1.5
            active_signals.append("BB‰∏äÈôêÊé•Ëøë")
        
        # RSI(3)Ê•µÈôêÂèçËª¢ÔºàÊñ∞Ë¶èËøΩÂä†Ôºâ
        if current.get('RSI_3_reversal', False):
            exit_score += 2.2
            active_signals.append("RSI(3)Ê•µÈôêÂèçËª¢")
        elif current.get('RSI_3', 0) > 85:
            exit_score += 0.8
            active_signals.append("RSI(3)Ê•µÈôêÂúè")
        
        # MACD„Éí„Çπ„Éà„Ç∞„É©„É†„ÅÆ„Éî„Éº„ÇØ„Ç¢„Ç¶„Éà
        if not pd.isna(current['MACD_hist']) and not pd.isna(prev['MACD_hist']):
            if current['MACD_hist'] > 0 and prev['MACD_hist'] > 0 and current['MACD_hist'] < prev['MACD_hist']:
                exit_score += 1.3
                active_signals.append("MACD„Éí„Çπ„ÉàÈ†ÇÁÇπ")
        
        if current['MACD'] < current['Signal'] and prev['MACD'] > prev['Signal']:
            exit_score += 1.2
            active_signals.append("MACDÂ£≤„Çä„ÇØ„É≠„Çπ")
        
        if current['RSI'] > 70:
            exit_score += 1.0
            active_signals.append("RSIÈÅéÁÜ±Âúè")
        
        return exit_score, active_signals

# „É°„Ç§„É≥„Ç¢„Éó„É™„Ç±„Éº„Ç∑„Éß„É≥
st.title("üéØ Èù©Êñ∞ÁöÑÂ£≤„Çä„Çø„Ç§„Éü„É≥„Ç∞Ê§úÂá∫„Ç∑„Çπ„ÉÜ„É†")
st.markdown("**QuantumExit‚Ñ¢Ô∏è „Ç¢„É´„Ç¥„É™„Ç∫„É†Êê≠Ëºâ - „Éó„É≠„Éà„É¨„Éº„ÉÄ„Éº„ÅÆÂ£≤„ÇäÂà§Êñ≠„ÇíÂÆåÂÖ®Ëá™ÂãïÂåñ**")
st.markdown("---")

# „Çµ„Ç§„Éâ„Éê„Éº
with st.sidebar:
    st.header("‚öôÔ∏è „Ç∑„Çπ„ÉÜ„É†Ë®≠ÂÆö")
    
    # „ÉÜ„Ç£„ÉÉ„Ç´„Éº„Ç≥„Éº„ÉâÂÖ•Âäõ
    ticker = st.text_input(
        "„ÉÜ„Ç£„ÉÉ„Ç´„Éº„Ç≥„Éº„Éâ",
        value="AAPL",
        help="‰æã: AAPL, TSLA, ^N225, 7203.T"
    )
    
    # ÊúüÈñìÈÅ∏Êäû
    period = st.selectbox(
        "ÂàÜÊûêÊúüÈñì",
        options=["3mo", "6mo", "1y", "2y", "5y"],
        index=3,
        help="Â£≤„Çä„Çø„Ç§„Éü„É≥„Ç∞ÂàÜÊûê„ÅÆÂØæË±°ÊúüÈñì"
    )
    
    st.markdown("### üéöÔ∏è „Ç∑„Ç∞„Éä„É´Èáç„ÅøË®≠ÂÆö")
    
    col1, col2 = st.columns(2)
    with col1:
        sar_weight = st.slider(
            "SARÂèçËª¢",
            min_value=0.0,
            max_value=5.0,
            value=2.5,
            step=0.1,
            help="„Éë„É©„Éú„É™„ÉÉ„ÇØSARÂèçËª¢„ÅÆÈáçË¶ÅÂ∫¶"
        )
        
        rsi_div_weight = st.slider(
            "RSI„ÉÄ„Ç§„Éê„Éº„Ç∏„Çß„É≥„Çπ",
            min_value=0.0,
            max_value=5.0,
            value=1.8,
            step=0.1
        )
        
        bb_weight = st.slider(
            "BB‰∏äÈôêÂèçËêΩ ‚≠ê",
            min_value=0.0,
            max_value=5.0,
            value=3.0,  # „Éá„Éï„Ç©„É´„ÉàÂÄ§„Çí3.0„Å´Âºï„Åç‰∏ä„Åí
            step=0.1,
            help="„Éú„É™„É≥„Ç∏„É£„Éº„Éê„É≥„Éâ‰∏äÈôêÂèçËêΩ„ÅÆÈáçË¶ÅÂ∫¶ÔºàÊé®Â•®: 3.0‰ª•‰∏äÔºâ"
        )
        
        obv_weight = st.slider(
            "OBV‰∏ãËêΩËª¢Êèõ",
            min_value=0.0,
            max_value=5.0,
            value=1.0,
            step=0.1
        )
    
    with col2:
        atr_weight = st.slider(
            "ATR„Çπ„Éà„ÉÉ„Éó",
            min_value=0.0,
            max_value=5.0,
            value=2.0,
            step=0.1
        )
        
        vol_climax_weight = st.slider(
            "Âá∫Êù•È´ò„ÇØ„É©„Ç§„Éû„ÉÉ„ÇØ„Çπ",
            min_value=0.0,
            max_value=5.0,
            value=1.5,
            step=0.1
        )
        
        macd_weight = st.slider(
            "MACDÂ£≤„Çä„ÇØ„É≠„Çπ",
            min_value=0.0,
            max_value=5.0,
            value=1.2,
            step=0.1
        )
        
        macd_hist_weight = st.slider(
            "MACD„Éí„Çπ„ÉàÈ†ÇÁÇπ üìä",
            min_value=0.0,
            max_value=5.0,
            value=1.3,
            step=0.1,
            help="MACD„Éí„Çπ„Éà„Ç∞„É©„É†„ÅÆ„Éî„Éº„ÇØ„Ç¢„Ç¶„ÉàÊ§úÂá∫"
        )
    
    st.markdown("### üìä Ë°®Á§∫Ë®≠ÂÆö")
    
    # Â£≤„Çä„Çø„Ç§„ÉóÈÅ∏Êäû
    exit_types = st.multiselect(
        "Ë°®Á§∫„Åô„ÇãÂ£≤„Çä„Çø„Ç§„Éó",
        options=["Êó©ÊúüË≠¶Êàí", "Ê®ôÊ∫ñÂ£≤„Çä", "Á∑äÊÄ•Â£≤„Çä"],
        default=["Êó©ÊúüË≠¶Êàí", "Ê®ôÊ∫ñÂ£≤„Çä", "Á∑äÊÄ•Â£≤„Çä"],
        help="„ÉÅ„É£„Éº„Éà„Å´Ë°®Á§∫„Åô„ÇãÂ£≤„Çä„Ç∑„Ç∞„Éä„É´„ÅÆ„Çø„Ç§„Éó"
    )
    
    # ATRË®≠ÂÆö
    st.markdown("### üõ°Ô∏è ATR„Éà„É¨„Éº„É™„É≥„Ç∞„Çπ„Éà„ÉÉ„ÉóË®≠ÂÆö")
    atr_period = st.number_input(
        "ATRÊúüÈñì",
        min_value=7,
        max_value=21,
        value=14,
        step=1
    )
    
    atr_multiplier = st.slider(
        "ATRÂÄçÁéá",
        min_value=1.0,
        max_value=5.0,
        value=2.5,
        step=0.1,
        help="ATR„ÅÆ‰ΩïÂÄç„Çí„Çπ„Éà„ÉÉ„ÉóÂπÖ„Å®„Åô„Çã„Åã"
    )
    
    # „Éú„É™„É≥„Ç∏„É£„Éº„Éê„É≥„ÉâË®≠ÂÆöÔºàÊñ∞Ë¶èËøΩÂä†Ôºâ
    st.markdown("### üìä „Éú„É™„É≥„Ç∏„É£„Éº„Éê„É≥„ÉâË®≠ÂÆö")
    bb_approach_threshold = st.slider(
        "BB‰∏äÈôêÊé•ËøëÂà§ÂÆöÈñæÂÄ§(%)",
        min_value=90,
        max_value=100,
        value=98,
        step=1,
        help="BB‰∏äÈôê„ÅÆ‰ΩïÔºÖ„Å´ÈÅî„Åó„Åü„ÇâÊé•Ëøë„Å®Âà§ÂÆö„Åô„Çã„Åã"
    )
    
    bb_enhanced_detection = st.checkbox(
        "BBÊã°ÂºµÊ§úÂá∫„É¢„Éº„Éâ",
        value=True,
        help="BB‰∏äÈôê„Çø„ÉÉ„ÉÅ„ÄÅÊé•Ëøë„ÄÅÂèçËêΩÈñãÂßã„Å™„Å©Ë§áÊï∞„Éë„Çø„Éº„É≥„ÇíÊ§úÂá∫"
    )
    
    # ÂÆüË°å„Éú„Çø„É≥
    st.markdown("---")
    execute = st.button("üöÄ Â£≤„Çä„Çø„Ç§„Éü„É≥„Ç∞ÂàÜÊûêÈñãÂßã", use_container_width=True)

# „É°„Ç§„É≥„Ç®„É™„Ç¢
if execute:
    # „Éó„É≠„Ç∞„É¨„Çπ„Éê„Éº
    progress_bar = st.progress(0)
    status_text = st.empty()
    
    # „Ç§„É≥„Çπ„Çø„É≥„Çπ‰ΩúÊàê
    detector = AdvancedExitDetector()
    
    # „Éá„Éº„ÇøÂèñÂæó
    status_text.text(f"{ticker}„ÅÆ„Éá„Éº„Çø„ÇíÂèñÂæó‰∏≠...")
    progress_bar.progress(10)
    
    if detector.fetch_data(ticker, period):
        # Âü∫Êú¨ÊåáÊ®ôË®àÁÆó
        status_text.text(f"{detector.company_name or ticker}„ÅÆÂ£≤„Çä„Ç∑„Ç∞„Éä„É´„ÇíË®àÁÆó‰∏≠...")
        progress_bar.progress(25)
        
        # „Éë„É©„Éú„É™„ÉÉ„ÇØSARË®àÁÆó
        detector.calculate_parabolic_sar()
        progress_bar.progress(35)
        
        # ATR„Éà„É¨„Éº„É™„É≥„Ç∞„Çπ„Éà„ÉÉ„ÉóË®àÁÆó
        detector.calculate_atr_trailing_stop(period=atr_period, multiplier=atr_multiplier)
        progress_bar.progress(45)
        
        # RSI„ÉÄ„Ç§„Éê„Éº„Ç∏„Çß„É≥„ÇπÊ§úÂá∫
        detector.detect_rsi_divergence()
        progress_bar.progress(55)
        
        # „Éú„É™„É•„Éº„É†„ÇØ„É©„Ç§„Éû„ÉÉ„ÇØ„ÇπÊ§úÂá∫
        detector.calculate_volume_climax()
        progress_bar.progress(65)
        
        # È´òÂ∫¶„Å™ÊåáÊ®ôË®àÁÆó
        detector.calculate_advanced_indicators()
        progress_bar.progress(75)
        
        # Â£≤„Çä„Éù„Ç§„É≥„ÉàÊ§úÂá∫
        status_text.text("Â£≤„Çä„Çø„Ç§„Éü„É≥„Ç∞„ÇíÊ§úÂá∫‰∏≠...")
        detector.detect_exit_points(
            sar_weight=sar_weight,
            atr_weight=atr_weight,
            rsi_div_weight=rsi_div_weight,
            vol_climax_weight=vol_climax_weight,
            bb_weight=bb_weight,
            macd_weight=macd_weight,
            obv_weight=obv_weight,
            macd_hist_weight=macd_hist_weight,
            bb_approach_threshold=bb_approach_threshold/100,  # „Éë„Éº„Çª„É≥„Éà„ÇíÂ∞èÊï∞„Å´Â§âÊèõ
            bb_enhanced=bb_enhanced_detection
        )
        progress_bar.progress(85)
        
        # „ÉÅ„É£„Éº„Éà‰ΩúÊàê
        status_text.text("„ÉÅ„É£„Éº„Éà„ÇíÁîüÊàê‰∏≠...")
        fig = detector.create_chart(exit_types)
        progress_bar.progress(95)
        
        # „Éë„Éï„Ç©„Éº„Éû„É≥„ÇπÂàÜÊûê
        performance = detector.analyze_performance(exit_types)
        
        # ÁèæÂú®„ÅÆ„Ç∑„Ç∞„Éä„É´Âº∑Â∫¶
        current_score, active_signals = detector.get_current_exit_signal()
        
        progress_bar.progress(100)
        status_text.text("ÂàÜÊûêÂÆå‰∫ÜÔºÅ")
        
        # ÁèæÂú®„ÅÆÂ£≤„Çä„Ç∑„Ç∞„Éä„É´Áä∂ÊÖãË°®Á§∫
        st.markdown("---")
        st.header("üö® ÁèæÂú®„ÅÆÂ£≤„Çä„Ç∑„Ç∞„Éä„É´Áä∂ÊÖã")
        
        col1, col2, col3, col4, col5 = st.columns(5)
        
        latest_price = detector.df['Close'].iloc[-1]
        prev_close = detector.df['Close'].iloc[-2]
        price_change = latest_price - prev_close
        price_change_pct = (price_change / prev_close) * 100
        
        with col1:
            display_name = detector.company_name if detector.company_name else ticker
            st.metric(
                f"{display_name}",
                f"${latest_price:,.2f}",
                f"{price_change:+,.2f} ({price_change_pct:+.2f}%)"
            )
        
        with col2:
            st.metric(
                "Â£≤„Çä„Çπ„Ç≥„Ç¢",
                f"{current_score:.1f}",
                f"{'Á∑äÊÄ•' if current_score >= 7 else 'Ê®ôÊ∫ñ' if current_score >= 5 else 'Ë≠¶Êàí' if current_score >= 3 else 'ÂÆâÂÖ®'}"
            )
        
        with col3:
            current_rsi = detector.df['RSI'].iloc[-1]
            st.metric(
                "RSI(14)",
                f"{current_rsi:.1f}",
                f"{'ÈÅéÁÜ±' if current_rsi > 70 else '‰∏≠Á´ã' if current_rsi > 30 else 'Â£≤„Çâ„ÇåÈÅé„Åé'}"
            )
        
        with col4:
            current_rsi3 = detector.df['RSI_3'].iloc[-1]
            st.metric(
                "RSI(3) üî•",
                f"{current_rsi3:.1f}",
                f"{'Ê•µÈôêÔºÅ' if current_rsi3 > 85 else 'ÈÅéÁÜ±' if current_rsi3 > 70 else 'Ê≠£Â∏∏'}"
            )
        
        with col5:
            atr_stop = detector.df['ATR_stop'].iloc[-1]
            stop_distance = ((latest_price - atr_stop) / latest_price) * 100
            st.metric(
                "ATR„Çπ„Éà„ÉÉ„Éó„Åæ„Åß",
                f"{stop_distance:.1f}%",
                f"${atr_stop:.2f}"
            )
        
        # Â£≤„Çä„Ç∑„Ç∞„Éä„É´„Ç¢„É©„Éº„Éà
        if current_score >= 7:
            st.markdown('<div class="exit-emergency">üî¥ Á∑äÊÄ•Â£≤„Çä„Ç∑„Ç∞„Éä„É´Áô∫Áîü‰∏≠ÔºÅÂç≥Â∫ß„ÅÆÂÖ®Â£≤Âç¥„ÇíÊé®Â•®</div>', unsafe_allow_html=True)
        elif current_score >= 5:
            st.markdown('<div class="exit-standard">üü† Ê®ôÊ∫ñÂ£≤„Çä„Ç∑„Ç∞„Éä„É´Áô∫Áîü‰∏≠ - 50%„ÅÆÂà©Á¢∫„ÇíÊé®Â•®</div>', unsafe_allow_html=True)
        elif current_score >= 3:
            st.markdown('<div class="exit-warning">üü° Êó©ÊúüË≠¶Êàí„Ç∑„Ç∞„Éä„É´ - 25-30%„ÅÆÈÉ®ÂàÜÂà©Á¢∫„ÇíÊ§úË®é</div>', unsafe_allow_html=True)
        
        # „Ç¢„ÇØ„ÉÜ„Ç£„Éñ„Ç∑„Ç∞„Éä„É´Ë°®Á§∫
        if active_signals:
            st.markdown("**üéØ ÁèæÂú®„Ç¢„ÇØ„ÉÜ„Ç£„Éñ„Å™Â£≤„Çä„Ç∑„Ç∞„Éä„É´:**")
            signal_cols = st.columns(len(active_signals))
            for i, signal in enumerate(active_signals):
                with signal_cols[i]:
                    st.info(f"‚úì {signal}")
        
        # „ÉÅ„É£„Éº„ÉàË°®Á§∫
        st.plotly_chart(fig, use_container_width=True)
        
        # „Éë„Éï„Ç©„Éº„Éû„É≥„Çπ„É¨„Éù„Éº„Éà
        st.markdown("---")
        st.header("üìä Â£≤„Çä„Çø„Ç§„Éü„É≥„Ç∞ÂàÜÊûê„É¨„Éù„Éº„Éà")
        
        # „Éë„Éï„Ç©„Éº„Éû„É≥„Çπ„Çµ„Éû„É™„Éº
        if performance:
            st.subheader("üí∞ Â£≤„Çä„Ç∑„Ç∞„Éä„É´Âà•„Éë„Éï„Ç©„Éº„Éû„É≥„Çπ")
            
            type_labels = {
                'warning': 'Êó©ÊúüË≠¶Êàí',
                'standard': 'Ê®ôÊ∫ñÂ£≤„Çä',
                'emergency': 'Á∑äÊÄ•Â£≤„Çä'
            }
            
            perf_df = pd.DataFrame(performance).T
            perf_df.index = [type_labels[idx] for idx in perf_df.index if idx in type_labels]
            
            col1, col2 = st.columns(2)
            
            with col1:
                st.dataframe(
                    perf_df[['count', 'success_rate', 'avg_avoided_loss']].round(2),
                    use_container_width=True
                )
            
            with col2:
                # „Éë„Éï„Ç©„Éº„Éû„É≥„Çπ„ÉÅ„É£„Éº„Éà
                colors = {
                    'Êó©ÊúüË≠¶Êàí': 'yellow',
                    'Ê®ôÊ∫ñÂ£≤„Çä': 'orange',
                    'Á∑äÊÄ•Â£≤„Çä': 'red'
                }
                bar_colors = [colors.get(idx, 'gray') for idx in perf_df.index]
                
                fig_perf = go.Figure()
                fig_perf.add_trace(go.Bar(
                    x=perf_df.index,
                    y=perf_df['avg_avoided_loss'],
                    text=perf_df['avg_avoided_loss'].round(2),
                    textposition='auto',
                    marker_color=bar_colors
                ))
                fig_perf.update_layout(
                    title="Âπ≥ÂùáÂõûÈÅøÊêçÂ§±Áéá (%)",
                    height=300,
                    showlegend=False
                )
                st.plotly_chart(fig_perf, use_container_width=True)
        
        # Áõ¥Ëøë„ÅÆÂ£≤„Çä„Ç∑„Ç∞„Éä„É´
        st.subheader("üìç Áõ¥Ëøë„ÅÆÂ£≤„Çä„Ç∑„Ç∞„Éä„É´Â±•Ê≠¥ (ÊúÄÊñ∞10‰ª∂)")
        
        type_mapping = {
            'Êó©ÊúüË≠¶Êàí': 'warning',
            'Ê®ôÊ∫ñÂ£≤„Çä': 'standard',
            'Á∑äÊÄ•Â£≤„Çä': 'emergency'
        }
        
        selected_types = [type_mapping[t] for t in exit_types if t in type_mapping]
        
        all_exits = []
        for exit_type in selected_types:
            if exit_type in detector.exit_points:
                for ep in detector.exit_points[exit_type]:
                    ep['exit_type'] = exit_type
                    all_exits.append(ep)
        
        if all_exits:
            all_exits.sort(key=lambda x: x['date'], reverse=True)
            
            recent_exits = []
            for ep in all_exits[:10]:
                recent_exits.append({
                    'Êó•‰ªò': ep['date'].strftime('%Y-%m-%d'),
                    '„Çø„Ç§„Éó': {'warning': 'Êó©ÊúüË≠¶Êàí', 'standard': 'Ê®ôÊ∫ñÂ£≤„Çä', 'emergency': 'Á∑äÊÄ•Â£≤„Çä'}[ep['exit_type']],
                    '‰æ°Ê†º': f"${ep['price']:,.2f}",
                    '„Çπ„Ç≥„Ç¢': f"{ep['score']:.1f}",
                    '‰∏ªË¶Å„Ç∑„Ç∞„Éä„É´': ', '.join([k for k, v in ep['conditions'].items() if v and k not in ['BB‰∏äÈôêÂèçËêΩ']][:3])
                })
            
            st.dataframe(pd.DataFrame(recent_exits), use_container_width=True)
        else:
            st.info("ÈÅ∏Êäû„Åï„Çå„Åü„Çø„Ç§„Éó„ÅÆÂ£≤„Çä„Ç∑„Ç∞„Éä„É´„ÅØÊ§úÂá∫„Åï„Çå„Åæ„Åõ„Çì„Åß„Åó„Åü„ÄÇ")
        
        # Áµ±Ë®à„Çµ„Éû„É™„Éº
        st.subheader("üìà Â£≤„Çä„Ç∑„Ç∞„Éä„É´Áµ±Ë®à")
        
        col1, col2, col3 = st.columns(3)
        
        with col1:
            total_exits = sum(len(detector.exit_points[t]) for t in selected_types if t in detector.exit_points)
            st.metric("Á∑èÂ£≤„Çä„Ç∑„Ç∞„Éä„É´Êï∞", total_exits)
            
            # BBÈñ¢ÈÄ£„Ç∑„Ç∞„Éä„É´„ÅÆ„Ç´„Ç¶„É≥„Éà
            bb_signal_count = 0
            for t in selected_types:
                if t in detector.exit_points:
                    for ep in detector.exit_points[t]:
                        if any(k.startswith('BB') and v for k, v in ep['conditions'].items()):
                            bb_signal_count += 1
            st.metric("BBÈñ¢ÈÄ£„Ç∑„Ç∞„Éä„É´", f"{bb_signal_count}‰ª∂")
        
        with col2:
            # RSI(3)Ê•µÈôêÂèçËª¢„Ç∑„Ç∞„Éä„É´„ÅÆ„Ç´„Ç¶„É≥„Éà
            rsi3_signal_count = 0
            for t in selected_types:
                if t in detector.exit_points:
                    for ep in detector.exit_points[t]:
                        if ep['conditions'].get('RSI3Ê•µÈôêÂèçËª¢', False):
                            rsi3_signal_count += 1
            st.metric("RSI(3)Ê•µÈôêÂèçËª¢", f"{rsi3_signal_count}‰ª∂")
            
            # MACD„Éí„Çπ„Éà„Ç∞„É©„É†È†ÇÁÇπ„ÅÆ„Ç´„Ç¶„É≥„Éà
            macd_peak_count = 0
            for t in selected_types:
                if t in detector.exit_points:
                    for ep in detector.exit_points[t]:
                        if (ep['conditions'].get('MACD„Éí„Çπ„ÉàÈ†ÇÁÇπ', False) or 
                            ep['conditions'].get('MACD„Éí„Çπ„ÉàÈ†ÇÁÇπ(Âº∑)', False)):
                            macd_peak_count += 1
            st.metric("MACD„Éí„Çπ„ÉàÈ†ÇÁÇπ", f"{macd_peak_count}‰ª∂")
        
        with col3:
            if 'emergency' in selected_types and detector.exit_points['emergency']:
                last_emergency = detector.exit_points['emergency'][-1]['date']
                # „Çø„Ç§„É†„Çæ„Éº„É≥ÂïèÈ°å„ÇíÂõûÈÅø„Åô„Çã„Åü„ÇÅ„ÄÅ‰∏°Êñπ„Çípandas„ÅÆTimestamp„Å´Â§âÊèõ
                current_date = pd.Timestamp.now().tz_localize(None)
                last_emergency_date = pd.Timestamp(last_emergency).tz_localize(None)
                days_since = (current_date - last_emergency_date).days
                st.metric("Áõ¥Ëøë„ÅÆÁ∑äÊÄ•Â£≤„Çä", f"{days_since}Êó•Ââç")
            else:
                st.metric("Áõ¥Ëøë„ÅÆÁ∑äÊÄ•Â£≤„Çä", "„Å™„Åó")
                
            avg_scores = []
            for t in selected_types:
                if t in detector.exit_points and detector.exit_points[t]:
                    avg_scores.extend([ep['score'] for ep in detector.exit_points[t]])
            if avg_scores:
                st.metric("Âπ≥ÂùáÂ£≤„Çä„Çπ„Ç≥„Ç¢", f"{np.mean(avg_scores):.1f}")
            else:
                st.metric("Âπ≥ÂùáÂ£≤„Çä„Çπ„Ç≥„Ç¢", "N/A")
        
        # „Ç®„ÇØ„Çπ„Éù„Éº„ÉàÊ©üËÉΩ
        st.markdown("---")
        st.subheader("üíæ „Éá„Éº„Çø„Ç®„ÇØ„Çπ„Éù„Éº„Éà")
        
        col1, col2 = st.columns(2)
        
        with col1:
            # Â£≤„Çä„Ç∑„Ç∞„Éä„É´„Éá„Éº„Çø„ÅÆ„ÉÄ„Ç¶„É≥„É≠„Éº„Éâ
            if all_exits:
                exit_df = pd.DataFrame([{
                    'Êó•‰ªò': ep['date'],
                    '„Çø„Ç§„Éó': {'warning': 'Êó©ÊúüË≠¶Êàí', 'standard': 'Ê®ôÊ∫ñÂ£≤„Çä', 'emergency': 'Á∑äÊÄ•Â£≤„Çä'}[ep['exit_type']],
                    '‰æ°Ê†º': ep['price'],
                    '„Çπ„Ç≥„Ç¢': ep['score'],
                    'SARÂèçËª¢': ep['conditions'].get('SARÂèçËª¢', False),
                    'ATR„Çπ„Éà„ÉÉ„Éó': ep['conditions'].get('ATR„Çπ„Éà„ÉÉ„Éó', False),
                    'RSI„ÉÄ„Ç§„Éê„Éº„Ç∏„Çß„É≥„Çπ': ep['conditions'].get('RSI„ÉÄ„Ç§„Éê„Éº„Ç∏„Çß„É≥„Çπ', False),
                    'RSI3Ê•µÈôêÂèçËª¢': ep['conditions'].get('RSI3Ê•µÈôêÂèçËª¢', False),
                    'Âá∫Êù•È´ò„ÇØ„É©„Ç§„Éû„ÉÉ„ÇØ„Çπ': ep['conditions'].get('Âá∫Êù•È´ò„ÇØ„É©„Ç§„Éû„ÉÉ„ÇØ„Çπ', False),
                    'BBÂº∑ÂèçËêΩ': ep['conditions'].get('BBÂº∑ÂèçËêΩ', False),
                    'BBÂèçËêΩÈñãÂßã': ep['conditions'].get('BBÂèçËêΩÈñãÂßã', False),
                    'BB‰∏äÈôê„Çø„ÉÉ„ÉÅ': ep['conditions'].get('BB‰∏äÈôê„Çø„ÉÉ„ÉÅ', False),
                    'BB‰∏äÈôêÊé•Ëøë': ep['conditions'].get('BB‰∏äÈôêÊé•Ëøë', False),
                    'BBÊã°Â§ßÊôÇ„Çø„ÉÉ„ÉÅ': ep['conditions'].get('BBÊã°Â§ßÊôÇ„Çø„ÉÉ„ÉÅ', False),
                    'MACDÂ£≤„Çä„ÇØ„É≠„Çπ': ep['conditions'].get('MACDÂ£≤„Çä„ÇØ„É≠„Çπ', False),
                    'MACD„Éí„Çπ„ÉàÈ†ÇÁÇπ': ep['conditions'].get('MACD„Éí„Çπ„ÉàÈ†ÇÁÇπ', False),
                    'MACD„Éí„Çπ„ÉàÈ†ÇÁÇπ(Âº∑)': ep['conditions'].get('MACD„Éí„Çπ„ÉàÈ†ÇÁÇπ(Âº∑)', False),
                    'OBV‰∏ãËêΩËª¢Êèõ': ep['conditions'].get('OBV‰∏ãËêΩËª¢Êèõ', False)
                } for ep in all_exits])
                
                csv_exits = exit_df.to_csv(index=False)
                safe_name = (detector.company_name or ticker).replace(' ', '_').replace('/', '_').replace('.', '')
                st.download_button(
                    label="üì• Â£≤„Çä„Ç∑„Ç∞„Éä„É´Â±•Ê≠¥„Çí„ÉÄ„Ç¶„É≥„É≠„Éº„Éâ",
                    data=csv_exits,
                    file_name=f"{safe_name}_exit_signals.csv",
                    mime="text/csv"
                )
        
        with col2:
            # „ÉÜ„ÇØ„Éã„Ç´„É´ÊåáÊ®ô„Éá„Éº„Çø„ÅÆ„ÉÄ„Ç¶„É≥„É≠„Éº„Éâ
            indicators_df = detector.df[['Close', 'SAR', 'ATR_stop', 'RSI', 'RSI_3', 'MACD', 'Signal', 
                                        'BB_upper', 'BB_lower', 'Volume', 'OBV']].copy()
            csv_indicators = indicators_df.to_csv()
            safe_name = (detector.company_name or ticker).replace(' ', '_').replace('/', '_').replace('.', '')
            st.download_button(
                label="üì• „ÉÜ„ÇØ„Éã„Ç´„É´ÊåáÊ®ô„Éá„Éº„Çø„Çí„ÉÄ„Ç¶„É≥„É≠„Éº„Éâ",
                data=csv_indicators,
                file_name=f"{safe_name}_technical_indicators.csv",
                mime="text/csv"
            )
        
        # „Éó„É≠„ÅÆ„Éí„É≥„ÉàÔºàÊîπËâØÁâàÔºâ
        st.markdown("---")
        st.info("""
        **üí° „Éó„É≠„Éà„É¨„Éº„ÉÄ„Éº„ÅÆ„Éí„É≥„Éà:**
        - üî¥ **Á∑äÊÄ•Â£≤„ÇäÔºà„Çπ„Ç≥„Ç¢7‰ª•‰∏äÔºâ**: Â∏ÇÂ†¥„ÅÆËª¢ÊèõÁÇπ„ÅÆÂèØËÉΩÊÄßÂ§ß„ÄÇÂç≥Â∫ß„ÅÆË°åÂãï„ÇíÊé®Â•®
        - üü† **Ê®ôÊ∫ñÂ£≤„ÇäÔºà„Çπ„Ç≥„Ç¢5-7Ôºâ**: „Éà„É¨„É≥„ÉâÂ§âÂåñ„ÅÆÂÖÜÂÄô„ÄÇÊÆµÈöéÁöÑ„Å™Âà©Á¢∫„ÇíÊ§úË®é
        - üü° **Êó©ÊúüË≠¶ÊàíÔºà„Çπ„Ç≥„Ç¢3-5Ôºâ**: Ê≥®ÊÑè‰ø°Âè∑„ÄÇ„Éù„Ç∏„Ç∑„Éß„É≥Ë™øÊï¥„ÅÆÊ∫ñÂÇô„Çí
        - ‚≠ê **BB‰∏äÈôê„Çø„ÉÉ„ÉÅ„ÅØÁâπ„Å´ÈáçË¶Å**: „Éú„É™„É≥„Ç∏„É£„Éº„Éê„É≥„Éâ‰∏äÈôê„Å∏„ÅÆÊé•Ëß¶„ÉªÊé•Ëøë„ÅØÈ´òÁ¢∫Áéá„ÅÆÂ£≤„Çä„Ç∑„Ç∞„Éä„É´
        - üî• **RSI(3) > 85„Åß„ÅÆÂèçËª¢„ÅØË∂ÖÂº∑Âäõ**: Áü≠ÊúüRSI„ÅÆÊ•µÈôêÈÅéÁÜ±„Åã„Çâ„ÅÆÂèçËª¢„ÅØÊÄ•ËêΩ„ÅÆÂâçÂÖÜ
        - üìä **MACD„Éí„Çπ„Éà„Ç∞„É©„É†„ÅÆÈ†ÇÁÇπ**: „Éó„É©„ÇπÂúè„Åß„ÅÆÊ∏õÂ∞ëÈñãÂßã„ÅØ„É¢„É°„É≥„Çø„É†Ê∏õË°∞„ÅÆÊó©ÊúüË≠¶Âëä
        - ‚ö†Ô∏è Ë§áÊï∞„ÅÆ„Ç∑„Ç∞„Éä„É´„ÅåÂêåÊôÇÁô∫Áîü„Åó„ÅüÂ†¥Âêà„ÅØÁâπ„Å´Ê≥®ÊÑè„ÅåÂøÖË¶Å„Åß„Åô
        - ‚è∞ Â£≤„Çä„Çø„Ç§„Éü„É≥„Ç∞„ÅØË≤∑„ÅÑ„Çø„Ç§„Éü„É≥„Ç∞„Çà„Çä„ÇÇÈáçË¶Å - Âà©Áõä„ÇíÂÆà„Çã„Åì„Å®„ÅåË≥áÁî£ÂΩ¢Êàê„ÅÆÈçµ
        
        **üéØ BBÔºà„Éú„É™„É≥„Ç∏„É£„Éº„Éê„É≥„ÉâÔºâ„Ç∑„Ç∞„Éä„É´„ÅÆË¶ãÊñπ:**
        - **BB‰∏äÈôêÁ™ÅÁ†¥**: ÊúÄ„ÇÇÂº∑„ÅÑÂ£≤„Çä„Ç∑„Ç∞„Éä„É´„ÄÇÈÅéÁÜ±ÊÑü„ÅåÊ•µÈôê„Å´ÈÅî„Åó„Å¶„ÅÑ„Çã
        - **BB‰∏äÈôê„Çø„ÉÉ„ÉÅ**: È´òÂÄ§„ÅåBB‰∏äÈôê„Å´Êé•Ëß¶„ÄÇÂèçËêΩ„ÅÆÂèØËÉΩÊÄßÂ§ß
        - **BB‰∏äÈôêÊé•Ëøë**: ÁµÇÂÄ§„ÅåBB‰∏äÈôê„ÅÆ98%‰ª•‰∏ä„ÄÇË≠¶Êàí„É¨„Éô„É´
        - **BBÊã°Â§ßÊôÇ„Çø„ÉÉ„ÉÅ**: „Éú„É©„ÉÜ„Ç£„É™„ÉÜ„Ç£Êã°Â§ß‰∏≠„ÅÆ„Çø„ÉÉ„ÉÅ„ÅØÁâπ„Å´Âç±Èô∫
        
        **üî• RSI(3)Ê•µÈôê„Ç∑„Ç∞„Éä„É´„ÅÆË¶ãÊñπ:**
        - **RSI(3) > 85„Åß„ÅÆ‰∏ãÂêë„ÅçËª¢Êèõ**: Áü≠ÊúüÁöÑ„Å™Ë≤∑„Çè„ÇåÈÅé„Åé„ÅÆÊ•µÈôê„Åã„Çâ„ÅÆÂèçËª¢
        - **ÈÄöÂ∏∏„ÅÆRSI(14)„Çà„ÇäÊó©Êúü„Å´Â§©‰∫ï„ÇíÊ§úÂá∫**: 3ÊúüÈñìRSI„ÅØÊ•µ„ÇÅ„Å¶ÊïèÊÑü
        - **ÊàêÂäüÁéáÁ¥Ñ75%**: „Éê„ÉÉ„ÇØ„ÉÜ„Çπ„Éà„ÅßÈ´ò„ÅÑÁöÑ‰∏≠Áéá„ÇíË®òÈå≤
        - **BB‰∏äÈôê„Çø„ÉÉ„ÉÅ„Å®ÂêåÊôÇÁô∫ÁîüÊôÇ„ÅØÁ∑äÊÄ•Â£≤„Çä**: Ë§áÂêà„Ç∑„Ç∞„Éä„É´„ÅØÁâπ„Å´Âº∑Âäõ
        
        **üìä MACD„Éí„Çπ„Éà„Ç∞„É©„É†„Éî„Éº„ÇØ„Ç¢„Ç¶„Éà„ÅÆË¶ãÊñπ:**
        - **„Éó„É©„ÇπÂúè„Åß„ÅÆÊ∏õÂ∞ëÈñãÂßã**: ‰∏äÊòá„É¢„É°„É≥„Çø„É†„ÅÆÊ∏õË°∞„ÇíÁ§∫„ÅôÊó©ÊúüË≠¶Âëä
        - **2Êó•ÈÄ£Á∂öÊ∏õÂ∞ë**: „Çà„ÇäÂº∑„ÅÑÂ£≤„Çä„Ç∑„Ç∞„Éä„É´Ôºà„Çπ„Ç≥„Ç¢+1.8Ôºâ
        - **„Ç™„É¨„É≥„Ç∏Ëâ≤„ÅÆ„Éê„Éº**: „ÉÅ„É£„Éº„Éà‰∏ä„Åß„Éî„Éº„ÇØ„Ç¢„Ç¶„Éà„ÇíË¶ñË¶öÁöÑ„Å´Ë°®Á§∫
        - **‰æ°Ê†º‰∏äÊòá‰∏≠„Åß„ÇÇÁô∫Áîü**: ‰æ°Ê†º„Çà„ÇäÂÖà„Å´„É¢„É°„É≥„Çø„É†„ÅåÂº±„Åæ„Çã„Åì„Å®„ÇíÊ§úÂá∫
        """)
        
    else:
        st.error(f"‚ùå {ticker} „ÅÆ„Éá„Éº„ÇøÂèñÂæó„Å´Â§±Êïó„Åó„Åæ„Åó„Åü„ÄÇ„ÉÜ„Ç£„ÉÉ„Ç´„Éº„Ç≥„Éº„Éâ„ÇíÁ¢∫Ë™ç„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ")
        st.info("üí° „Éí„É≥„Éà: Á±≥ÂõΩÊ†™„ÅÆÂ†¥Âêà„ÅØ AAPL „ÇÑ TSLA„ÄÅÊó•Áµå225„ÅØ ^N225 „Å™„Å©„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ")